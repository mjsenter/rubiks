#ifndef CAMERA_H
#define CAMERA_H

#include <Angel.h>

/**
 * \brief Represents a camera in world space
 *
 * Camera class to assist in looking at the world by providing a view matrix
 * to transform from world space to eye space and a projection matrix to
 * transform from eye space to clip space.  The camera supports 3 different
 * types of control depending on the methods used to update it.
 *
 * 1. Using the MoveForward/Backward/etc methods along with the LookUp/Down/etc
 *    methods provides a free-look camera in similar style to FPS games.
 *    Looking up and down always takes the world-up vector into account to
 *    ensure the camera never rolls.  There is always a definite feel for which
 *    direction is up.
 *
 * 2. Using the Pitch/Yaw/Roll methods provides a space flight simulator like
 *    camera, in which the camera is free to rotate in any direction.  There is
 *    no feel for which direction is the world-up.
 *
 * 3. Using the Orbit methods provides a trackball like control in which the
 *    camera moves around the scene on a sphere.  Using the OrbitUp/Down methods
 *    is equivalent to changing the phi component of the camera's position in
 *    spherical coordinates, while using the OrbitLeft/Right is equivalent to
 *    changing the theta component.  Use MoveForward/Backward to bring the
 *    camera closer or further away from the orbit point, essentially increasing
 *    or decreasing the orbit distance, or radius component in spherical coordinates.
 *
 * \author Jonathan Henze
 */
class Camera
{
public:

    /**
     * \brief Creates a new camera
     *
     * \param[in] position    - Starting position of the camera in world space
     * \param[in] forward     - Direction the camera is facing
     * \param[in] up          - Direction of the camera's up
     * \param[in] aspectRatio - Aspect ratio of the camera as width/height
     * \param[in] fovY        - Vertical field of view of the camera in degrees
     * \param[in] nearPlane   - How close objects can be before they can no
     *                          longer be seen.  Must be > 0
     * \param[in] farPlane    - How far away object can be before they dissapear.
     *                          Must be > nearPlane
     */
    Camera(
        const vec3& position = vec3(0,0,0),
        const vec3& forward  = vec3(0,0,-1),
        const vec3& up       = vec3(0,1,0),
        float aspectRatio        = 1.0f,
        float fovY               = 60.0f,
        float nearPlane          = 0.1f,
        float farPlane           = 1000.0f);

    /**
     * \brief Creates a camera from an existing instance
     *
     * \param[in] other - Camera to copy
     */
    Camera(const Camera& other);

    /**
     * \brief Camera destructor
     */
    ~Camera();

    /**
     * \brief Assigns this camera to be equal to another instance
     *
     * \param[in] other - Camera to copy
     */
    Camera& operator=(const Camera& other);

    /**
     * \brief Gets the aspect ratio of the camera as width/height
     *
     * \return The aspect ratio of the camera as width/height
     */
    inline float GetAspectRatio() const
    {
        return aspectRatio;
    }

    /**
     * \brief Sets the aspect ratio of the camera as width/height
     *
     * \param[in] aspectRatio - New aspect ratio as width/height
     */
    inline void SetAspectRatio(float aspectRatio)
    {
        this->aspectRatio = aspectRatio;
        projStale = true;
    }

    /**
     * \brief Gets the near plane of the camera's viewing frustum
     *
     * \return The near plane of the camera's viewing frustum
     */
    inline float GetNearPlane() const
    {
        return nearPlane;
    }

    /**
     * \brief Sets the near plane of the camera's viewing frustum
     *
     * \param[in] nearPlane - New value for the near plane, must be > 0
     */
    inline void SetNearPlane(float nearPlane)
    {
        this->nearPlane = nearPlane;
        projStale = true;
    }

    /**
     * \brief Gets the far plane of the camera's viewing frustum
     *
     * \return The far plane of the camera's viewing frustum
     */
    inline float GetFarPlane() const
    {
        return farPlane;
    }

    /**
     * \brief Sets the far plane of the camera's viewing frustum
     *
     * \param[in] farPlane - New value for the far plane, must be > nearPlane
     */
    inline void SetFarPlane(float farPlane)
    {
        this->farPlane = farPlane;
        projStale = true;
    }

    /**
     * \brief Gets the vertical field of view of the camera in degrees
     *
     * \return THe vertical field of view of the camera in degrees
     */
    inline float GetFieldOfView() const
    {
        return fovY;
    }

    /**
     * \brief Sets the vertical field of view of the camera in degrees
     *
     * \param[in] fovY - New vertical field of view in degrees
     */
    inline void SetFieldOfView(float fovY)
    {
        this->fovY = fovY;
        projStale = true;
    }

    /**
     * \brief Gets the camera's current view matrix
     *
     * \return The camera's view matrix
     */
    inline const mat4& GetView() const
    {
        if (viewStale)
        {
            RecalculateView();
            viewStale = false;
        }
        return view;
    }

    /**
     * \brief Gets the camera's current projection matrix
     *
     * \return The camera's projection matrix
     */
    inline const mat4& GetProjection() const
    {
        if (projStale)
        {
            RecalculateProjection();
            projStale = false;
        }
        return projection;
    }

    /**
     * \brief Gets the current world space position of the camera
     *
     * \return The current world space position of the camera
     */
    inline const vec3& GetPosition() const
    {
        return position;
    }

    /**
     * \brief Sets the current world space position of the camera
     *
     * Sets the current world space position of the camera without modifying
     * the rotation of the camera.  The camera will still be looking in the
     * same direction, but not at the same point.  If you want the camera to
     * adjust its rotation to still look at the same point, use the LookAt
     * function after setting the new position.
     *
     * \param[in] position - New position for the camera
     */
    inline void SetPosition(const vec3& position)
    {
        this->position = position;
        viewStale = true;
    }

    /**
     * \brief Gets a unit vector in the direction the camera is facing
     *
     * \return A unit vector in the direction the camera is facing
     */
    inline const vec3& GetForward() const
    {
        return forward;
    }

    /**
     * \brief Gets a unit vector in the direction of the camera's right
     *
     * \return A unit vector in the direction of the camera's right
     */
    inline const vec3& GetRight() const
    {
        return right;
    }

    /**
     * \brief Gets a unit vector in the direction of the camera's up
     *
     * \return A unit vector in the direction of the camera's up
     */
    inline const vec3& GetUp() const
    {
        return up;
    }

    /**
     * \brief Moves the camera's position by world space vector
     *
     * \param[in] delta - Vector to move the camera by in world space
     */
    inline void MoveBy(const vec3& delta)
    {
        position += delta;
        viewStale = true;
    }

    /**
     * \brief Moves the camera along its forward vector
     *
     * \param[in] amount - Distance to move the camera by
     */
    inline void MoveForward(float amount)
    {
        position += amount * forward;
        viewStale = true;
    }

    /**
     * \brief Moves the camera along its backward vector
     *
     * \param[in] amount - Distance to move the camera by
     */
    inline void MoveBackward(float amount)
    {
        MoveForward(-amount);
    }

    /**
     * \brief Moves the camera along its right vector
     *
     * \param[in] amount - Distance to move the camera by
     */
    inline void MoveRight(float amount)
    {
        position += amount * right;
        viewStale = true;
    }

    /**
     * \brief Moves the camera along its left vector
     *
     * \param[in] amount - Distance to move the camera by
     */
    inline void MoveLeft(float amount)
    {
        MoveRight(-amount);
    }

    /**
     * \brief Moves the camera along its up vector
     *
     * \param[in] amount - Distance to move the camera by
     */
    inline void MoveUp(float amount)
    {
        position += amount * up;
        viewStale = true;
    }

    /**
     * \brief Moves the camera along its down vector
     *
     * \param[in] amount - Distance to move the camera by
     */
    inline void MoveDown(float amount)
    {
        MoveUp(-amount);
    }

    /**
     * \brief Turns the camera to face a world space position
     *
     * \param[in] position - Position to look at
     * \param[in] up       - Up vector to use
     */
    void LookAt(const vec3& position);
    void LookAt(const vec3& position, const vec3& up);

    /**
     * \brief Tilts the camera to look up with FPS-like movement
     *
     * Tilts the camera to look up while taking the world up vector into account
     * to ensure that the camera does not roll.
     *
     * \param[in] degrees - Degrees to look up by
     */
    void LookUp(float degrees);

    /**
     * \brief Tilts the camera to look down with FPS-like movement
     *
     * Tilts the camera to look down while taking the world up vector into account
     * to ensure that the camera does not roll.
     *
     * \param[in] degrees - Degrees to look down by
     */
    inline void LookDown(float degrees)
    {
        LookUp(-degrees);
    }

    /**
     * \brief Tilts the camera to look right with FPS-like movement
     *
     * Tilts the camera to look right while taking the world up vector into account
     * to ensure that the camera does not roll.
     *
     * \param[in] degrees - Degrees to look right by
     */
    void LookRight(float degrees);

    /**
     * \brief Tilts the camera to look left with FPS-like movement
     *
     * Tilts the camera to look left while taking the world up vector into account
     * to ensure that the camera does not roll.
     *
     * \param[in] degrees - Degrees to look left by
     */
    inline void LookLeft(float degrees)
    {
        LookRight(-degrees);
    }

    /**
     * \brief Pitches the camera up with space flight like movement
     *
     * Pitches the camera up as if it were an airplane.  This can cause some roll
     * to be introduced if the camera yaws afterwards.
     *
     * This should not be mixed with the LookUp/Down/Right/Left functions.
     *
     * \param[in] degrees - Degrees to pitch up by
     */
    void PitchUp(float degrees);

    /**
     * \brief Pitches the camera down with space flight like movement
     *
     * Pitches the camera up as if it were an airplane.  This can cause some roll
     * to be introduced if the camera yaws afterwards.
     *
     * This should not be mixed with the LookUp/Down/Right/Left functions.
     *
     * \param[in] degrees - Degrees to pitch down by
     */
    inline void PitchDown(float degrees)
    {
        PitchUp(-degrees);
    }

    /**
     * \brief Yaws the camera right with space flight like movement
     *
     * Yaws the camera right as if it were an airplane.  This can cause some roll
     * to be introduced if the camera has previously pitched.
     *
     * This should not be mixed with the LookUp/Down/Right/Left functions.
     *
     * \param[in] degrees - Degrees to yaw right by
     */
    void YawRight(float degrees);

    /**
     * \brief Yaws the camera left with space flight like movement
     *
     * Yaws the camera left as if it were an airplane.  This can cause some roll
     * to be introduced if the camera has previously pitched.
     *
     * This should not be mixed with the LookUp/Down/Right/Left functions.
     *
     * \param[in] degrees - Degrees to yaw left by
     */
    inline void YawLeft(float degrees)
    {
        YawRight(-degrees);
    }

    /**
     * \brief Rolls the camera clockwise
     *
     * Rolls the camera clockwise, as if it were an airplane.
     *
     * This should not be mixed with the LookUp/Down/Right/Left functions.
     *
     * \param[in] degrees - Degrees to rotate clockwise by
     */
    inline void RollCW(float degrees)
    {
        RollCCW(-degrees);
    }

    /**
     * \brief Rolls the camera counter-clockwise
     *
     * Rolls the camera counter-clockwise, as if it were an airplane.
     *
     * This should not be mixed with the LookUp/Down/Right/Left functions.
     *
     * \param[in] degrees - Degrees to rotate counter-clockwise by
     */
    void RollCCW(float degrees);

    /** 
     * \brief Moves the camera upwards in orbit around the origin
     *
     * Moves the camera up a sphere around the origin while looking at the
     * origin.  This is identical to adjusting the phi component of the position
     * of the camera in spherical coordinates such that it moves up the sphere.
     *
     * \param[in] degrees - Degrees to orbit up by
     */
    void OrbitUp(float degrees);

    /** 
     * \brief Moves the camera upwards in orbit around the origin
     *
     * Moves the camera up a sphere around the origin while looking at the
     * origin.  This is identical to adjusting the phi component of the position
     * of the camera in spherical coordinates such that it moves up the sphere.
     *
     * \param[in] origin  - Origin to orbit around
     * \param[in] degrees - Degrees to orbit up by
     */
    void OrbitUp(const vec3& origin, float degrees);

    /** 
     * \brief Moves the camera downwards in orbit around the origin
     *
     * Moves the camera down a sphere around the origin while looking at the
     * origin.  This is identical to adjusting the phi component of the position
     * of the camera in spherical coordinates such that it moves down the sphere.
     *
     * \param[in] degrees - Degrees to orbit down by
     */
    inline void OrbitDown(float degrees)
    {
        OrbitUp(-degrees);
    }

    /** 
     * \brief Moves the camera downwards in orbit around the origin
     *
     * Moves the camera down a sphere around the origin while looking at the
     * origin.  This is identical to adjusting the phi component of the position
     * of the camera in spherical coordinates such that it moves down the sphere.
     *
     * \param[in] origin  - Origin to orbit around
     * \param[in] degrees - Degrees to orbit down by
     */
    inline void OrbitDown(const vec3& origin, float degrees)
    {
        OrbitUp(origin, -degrees);
    }

    /** 
     * \brief Moves the camera rightwards in orbit around the origin
     *
     * Moves the camera right a sphere around the origin while looking at the
     * origin.  This is identical to adjusting the theta component of the position
     * of the camera in spherical coordinates such that it moves right along the sphere.
     *
     * \param[in] degrees - Degrees to orbit right by
     */
    void OrbitRight(float degrees);

    /** 
     * \brief Moves the camera rightwards in orbit around the origin
     *
     * Moves the camera right a sphere around the origin while looking at the
     * origin.  This is identical to adjusting the theta component of the position
     * of the camera in spherical coordinates such that it moves right along the sphere.
     *
     * \param[in] origin  - Origin to orbit around
     * \param[in] degrees - Degrees to orbit right by
     */
    void OrbitRight(const vec3& origin, float degrees);

    /** 
     * \brief Moves the camera leftwards in orbit around the origin
     *
     * Moves the camera left a sphere around the origin while looking at the
     * origin.  This is identical to adjusting the theta component of the position
     * of the camera in spherical coordinates such that it moves left along the sphere.
     *
     * \param[in] degrees - Degrees to orbit left by
     */
    inline void OrbitLeft(float degrees)
    {
        OrbitRight(-degrees);
    }

    /** 
     * \brief Moves the camera leftwards in orbit around the origin
     *
     * Moves the camera left a sphere around the origin while looking at the
     * origin.  This is identical to adjusting the theta component of the position
     * of the camera in spherical coordinates such that it moves left along the sphere.
     *
     * \param[in] origin  - Origin to orbit around
     * \param[in] degrees - Degrees to orbit left by
     */
    inline void OrbitLeft(const vec3& origin, float degrees)
    {
        OrbitRight(origin, -degrees);
    }

private:
    vec3 position;     //!< World space position of the camera
    vec3 forward;      //!< Unit vector in the direction the camera is facing
    vec3 right;        //!< Unit vector in the direction of the camera's right
    vec3 up;           //!< Unit vector in the direction of the camera's up

    float aspectRatio; //!< The aspect ratio of the camera as width/height
    float nearPlane;   //!< The near plane of the camera, must be > 0
    float farPlane;    //!< The far plane of the camera
    float fovY;        //!< The vertical field of view of the camera in degrees

    mutable mat4 view;       //!< The camera's view matrix
    mutable mat4 projection; //!< The camera's projection matrix

    mutable bool viewStale;  //!< Flag whether the view matrix needs recalculating
    mutable bool projStale;  //!< Flag whether the projection matrix needs recalculating

    /**
     * \brief Recalculates the view matrix of the camera
     */
    void RecalculateView() const;

    /**
     * \brief Recalculates the projection matrix of the camera
     */
    void RecalculateProjection() const;
};

#endif
